# Generate a distribution package for PyPI.

name: 'Package - Build'
run-name: 'Package: Build from ${{github.ref}}'

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      json-filepath:
        description: "Path to the project's main JSON metadata file."
        default: './metadata/main.json'
        required: false
        type: string
    outputs:
      artifact-name:
        description: 'Name of the uploaded artifact containing the distribution archive.'
        value: ${{jobs.build-sdist.outputs.artifact-name}}
      package-name:
        description: 'Name of the package.'
        value: ${{jobs.build-sdist.outputs.package-name}}
      package-version:
        description: 'Version of the package.'
        value: ${{jobs.build-sdist.outputs.package-version}}

defaults:
  run:
    shell: bash

jobs:

  metadata:
    name: 'Get package metadata'
    outputs:
      package-name: ${{ fromJson(steps.get.outputs.json).package.name }}
      python-versions: ${{ toJson(fromJson(steps.get.outputs.json).package.python_publish_versions) }}
      operating-systems: ${{ toJson(fromJson(steps.get.outputs.json).package.operating_systems) }}
      cibuilds: ${{ toJson(fromJson(steps.get.outputs.json).package.cibuilds) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get
        uses: ./.github/actions/get-metadata
        with:
          json-filepath: ${{inputs.json-filepath}}

      - name: 'Print extracted data'
        run: |
          echo "Package Name: ${{ fromJson(steps.get.outputs.json).package.name }}"
          echo "Python Versions: '${{ toJson(fromJson(steps.get.outputs.json).package.python_versions) }}'"
          echo "OS: '${{ toJson(fromJson(steps.get.outputs.json).package.operating_systems) }}'"
          echo "cibuilds: '${{ toJson(fromJson(steps.get.outputs.json).package.cibuilds) }}'"


  build-sdist:
    name: 'Generate source distribution'
    outputs:
      package-name: ${{steps.get_name.outputs.package-name}}
      package-version: ${{steps.get_name.outputs.package-version}}
      artifact-name: ${{steps.get_name.outputs.artifact-name}}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build sdist'
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist/

      - name: 'Get build name'
        id: get_name
        shell: python
        run: |
          import os
          from pathlib import Path
          fullname = list((Path.cwd()/"dist").glob("*.tar.gz"))[0].stem.rstrip(".tar")
          name, ver = fullname.rsplit('-', 1)
          print("Artifact name:", fullname)
          print("Package name:", name)
          print("Package version:", ver)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'artifact-name={fullname}', file=fh)
            print(f'package-name={name}', file=fh)
            print(f'package-version={ver}', file=fh)


      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: ${{steps.get_name.outputs.artifact-name}}


  build_wheel:
    name: 'Generate built distribution (pure Python)'
    needs: [metadata, build-sdist]
    if: needs.metadata.outputs.cibuilds == 'null'
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: ${{needs.build-sdist.outputs.artifact-name}}


  build_wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: [metadata, build-sdist]
    if: needs.metadata.outputs.cibuilds != 'null'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Print system info'
        run: |
          uname -a
          df -h
          ulimit -a

      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        env:
          CIBW_BUILD_VERBOSITY: 2
          CIBW_BUILD: ${{ matrix.python-version }}-*

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: ${{needs.build-sdist.outputs.artifact-name}}
