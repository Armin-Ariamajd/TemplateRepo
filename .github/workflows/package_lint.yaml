# Run static code analysis

name: Lint
run-name: Test lint

on:
  workflow_dispatch:
  workflow_call:

defaults:
  run:
    shell: bash

jobs:

  metadata:
    name: 'Load package metadata'
    outputs:
      package-name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}
      python-versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}
      operating-systems: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Get metadata'
        id: get_metadata
        uses: ./.github/actions/get-metadata

      - name: 'Display metadata'
        run: |
          echo "Package Name: ${{ fromJson(steps.get_metadata.outputs.json).package.name }}"
          echo "Python Versions: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.python_versions) }}"
          echo "OS: ${{ toJson(fromJson(steps.get_metadata.outputs.json).package.operating_systems) }}"
          ls -a

      - name: try this
        shell: python
        # https://stackoverflow.com/questions/67631/how-can-i-import-a-module-dynamically-given-the-full-path
        run: |
          from pathlib import Path
          print(Path.cwd())
          print("-----")
          print(list(Path.cwd().glob("**/*")))

          import os
          print(os.environ['PATH'])

          import importlib.util
          import sys
          name = "metadata"
          spec = importlib.util.spec_from_file_location(name, "./metadata_/__init__.py")
          module = importlib.util.module_from_spec(spec)
          sys.modules[name] = module
          spec.loader.exec_module(module)
          metadata = module
          print(metadata.main.project)





  CodeQL:
    # Run code scanning with GitHub CodeQL.
    # Adapted from GitHub starter workflow, e.g.:
    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fcodeql.yml&workflow_template=code-scanning%2Fcodeql
    # Refs:
    #  https://github.com/github/codeql-action
    #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository
    name: 'Scan code with CodeQL'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
        # Available languages: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift'
        # CodeQL language support: https://aka.ms/codeql-docs/language-support
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Initialize CodeQL'
        # Initializes the CodeQL tools for scanning.
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # queries: security-extended,security-and-quality
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # For more details on CodeQL's query packs, refer to:
          #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs

      - name: Autobuild
        # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
        # If this step fails, then you should remove it and run the build manually instead.
        uses: github/codeql-action/autobuild@v2

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"


  bandit:
    # Bandit is a security linter designed to find common security issues in Python code.
    # This action will run Bandit on your codebase.
    # The results of the scan will be found under the Security tab of your repository.
    # Adapted from GitHub starter workflow, e.g.:
    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fbandit.yml&workflow_template=code-scanning%2Fbandit
    # Refs:
    #  https://github.com/marketplace/actions/bandit-scan
    #  https://pypi.org/project/bandit/
    name: 'Run bandit'
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Bandit Scan'
        uses: shundor/python-bandit-scan@v1.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.
          path: .


  pyre:
    # Pyre is a performant type checker for Python compliant with
    # PEP 484. Pyre can analyze codebases with millions of lines
    # of code incrementally â€“ providing instantaneous feedback
    # to developers as they write code.

    # Adapted from GitHub starter workflow, e.g.:
    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fpyre.yml&workflow_template=code-scanning%2Fpyre
    # Refs:
    #  https://github.com/facebook/pyre-action
    #  https://pyre-check.org
    name: 'Run Pyre'
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Run Pyre
        uses: facebook/pyre-action@v0.0.1
        with:
          repo-directory: './'
          requirements-path: 'requirements.txt'


  mypy:
    name: 'mypy (${{ matrix.os }}, python ${{ matrix.python-version }})'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install requirements'
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install mypy[reports]

      - name: 'Run mypy'
        run: |
          mkdir -p _local_reports/mypy
          mypy ./src --config-file pyproject.toml

      - name: 'Move reports'
        if: always()
        run: |
          mkdir -p artifacts/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv _local_reports/mypy/* artifacts/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}

      - name: 'Display info'
        if: always()
        run: |
          echo "::group::Python version"
          python -c "import sys; print(sys.version)"
          echo "::endgroup::"
          echo "::group::mypy Version"
          mypy --version
          echo "::endgroup::"
          echo "::group::pip list"
          python -m pip list
          echo "::endgroup::"
          echo "::group::OS and hardware info"
          uname -a
          echo "::endgroup::"
          echo "::group::Disk space usage"
          df -h
          echo "::endgroup::"
          echo "::group::Available system resources"
          ulimit -a
          echo "::endgroup::"
          echo "::group::Root directory"
          ls -a
          echo "::endgroup::"
          echo "::group::File tree"
          find .
          echo "::endgroup::"

      - name: 'Upload reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: artifacts
          name: lint


  pylint:
    name: 'Pylint'
    needs: metadata
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.metadata.outputs.operating-systems) }}
        python-version: ${{ fromJson(needs.metadata.outputs.python-versions) }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Setup MSYS2'
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-enchant

      - name: 'Install requirements'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install -y libenchant-2-2
              sudo apt install -y graphviz
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "Requirement already satisfied."
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew update-reset
              brew install enchant
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install pylint[spelling]


      - name: 'Run Pylint'
        run: |
          mkdir -p _local_reports/pylint/diagrams
          pylint ./src --rcfile pyproject.toml

      - name: 'Create diagrams'
        # https://pylint.readthedocs.io/en/latest/pyreverse.html
        if: always()
        run: |
          pyreverse ${{ needs.metadata.outputs.package-name }} --output-directory _local_reports/pylint/diagrams --output html --module-names y --colorized

      - name: 'Move reports'
        if: always()
        run: |
          mkdir -p artifacts/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv _local_reports/pylint/* artifacts/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}

      - name: 'Display info'
        if: always()
        run: |
          echo "::group::Python version"
          python -c "import sys; print(sys.version)"
          echo "::endgroup::"
          echo "::group::Pylint Version"
          pylint --version
          echo "::endgroup::"
          echo "::group::pip list"
          python -m pip list
          echo "::endgroup::"
          echo "::group::OS and hardware info"
          uname -a
          echo "::endgroup::"
          echo "::group::Disk space usage"
          df -h
          echo "::endgroup::"
          echo "::group::Available system resources"
          ulimit -a
          echo "::endgroup::"
          echo "::group::Root directory"
          ls -a
          echo "::endgroup::"
          echo "::group::File tree"
          find .
          echo "::endgroup::"

      - name: 'Upload Pylint reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: artifacts
          name: lint

#      - name: 'Upload diagrams'
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          path: |
#            _local_reports/pylint/diagrams/*
#          name: diagrams_${{ matrix.python-version }}_${{ matrix.os }}


  isort:
    name: 'Isort'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Setup Python'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ fromJson(needs.metadata.outputs.python-versions)[0] }}

      - name: 'Intall dependencies'
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade colorama

      - name: 'Display Python version'
        run: |
          echo '${{ steps.setup_python.outputs.python-version }}'
          python -c "import sys; print(sys.version)"

      - name: Run isort
        # https://github.com/marketplace/actions/python-isort
        # https://pycqa.github.io/isort/docs/configuration/github_action.html
        uses: isort/isort-action@master
        id: run_isort
        with:
          sort-paths: ./src
          configuration: "--settings-path pyproject.toml --check-only --diff"
#          requirements-files: "requirements.txt requirements-test.txt"

      - name: 'Save output'
        if: always()
        # Action: https://github.com/marketplace/actions/write-file
        uses: DamianReeves/write-file-action@master
        with:
          path: artifacts/isort.txt
          contents: ${{ steps.run_isort.outputs.isort-result }}

      - name: 'Upload isort report'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: artifacts
          name: lint


  black:
    name: 'Black'
    needs: metadata
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Run black'
        # https://black.readthedocs.io/en/stable/integrations/github_actions.html
        # https://github.com/psf/black/blob/main/action.yml
        id: black
        uses: psf/black@stable
        with:
          options: "--check --diff --color --config pyproject.toml"
          src: ./src
          jupyter: true


  git-attributes:
    # Check if all files have a corresponding rule in the '.gitattributes' file.
    name: 'Check .gitattributes'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Check .gitattributes'
        # Ref: https://github.com/alexkaratarakis/gitattributes/tree/master#ci-step
        run: |
          missing_attributes=$(git ls-files | git check-attr -a --stdin | grep "text: auto")
          if [[ "$missing_attributes" ]]; then
            echo ".gitattributes rule missing for the following files:";
            echo "$missing_attributes";
            exit 1;
          else
            echo "All files have a corresponding rule in .gitattributes";
            exit 0;
          fi
